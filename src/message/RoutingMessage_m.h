//
// Generated file, do not edit! Created by nedtool 4.6 from NEW/src/message/RoutingMessage.msg.
//

#ifndef _ROUTINGMESSAGE_M_H_
#define _ROUTINGMESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "NetwPkt_m.h"
#include "Coord.h"
// }}

/**
 * Class generated from <tt>NEW/src/message/RoutingMessage.msg:10</tt> by nedtool.
 * <pre>
 * message RoutingMessage extends NetwPkt
 * {
 *     LAddress::L3Type sinkAddress;
 *     LAddress::L3Type nodeAddress;
 *     Coord sinkPosition;
 *     double sinkDistance;
 * }
 * </pre>
 */
class RoutingMessage : public ::NetwPkt
{
  protected:
    LAddress::L3Type sinkAddress_var;
    LAddress::L3Type nodeAddress_var;
    Coord sinkPosition_var;
    double sinkDistance_var;

  private:
    void copy(const RoutingMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RoutingMessage&);

  public:
    RoutingMessage(const char *name=NULL, int kind=0);
    RoutingMessage(const RoutingMessage& other);
    virtual ~RoutingMessage();
    RoutingMessage& operator=(const RoutingMessage& other);
    virtual RoutingMessage *dup() const {return new RoutingMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual LAddress::L3Type& getSinkAddress();
    virtual const LAddress::L3Type& getSinkAddress() const {return const_cast<RoutingMessage*>(this)->getSinkAddress();}
    virtual void setSinkAddress(const LAddress::L3Type& sinkAddress);
    virtual LAddress::L3Type& getNodeAddress();
    virtual const LAddress::L3Type& getNodeAddress() const {return const_cast<RoutingMessage*>(this)->getNodeAddress();}
    virtual void setNodeAddress(const LAddress::L3Type& nodeAddress);
    virtual Coord& getSinkPosition();
    virtual const Coord& getSinkPosition() const {return const_cast<RoutingMessage*>(this)->getSinkPosition();}
    virtual void setSinkPosition(const Coord& sinkPosition);
    virtual double getSinkDistance() const;
    virtual void setSinkDistance(double sinkDistance);
};

inline void doPacking(cCommBuffer *b, RoutingMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, RoutingMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef _ROUTINGMESSAGE_M_H_

